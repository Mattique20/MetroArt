const ArtPiece = require('../models/ArtPiece');
const User = require('../models/User');
const { uploadToS3 } = require('../utils/s3Uploader'); // Make sure this path is correct

// Create a new art piece
exports.createArtPiece = async (req, res) => {
  const { title, description } = req.body;
  
  if (!req.file) {
    return res.status(400).json({ message: 'Image file is required' });
  }
  if (!title) {
    return res.status(400).json({ message: 'Title is required' });
  }

  const imageUrl = req.file.location; // URL from multer-s3

  try {
    const artPiece = await ArtPiece.create({
      title,
      description,
      imageUrl,
      artistId: req.user.id, // From authMiddleware
      // verificationHash will be auto-generated by model hook
    });
    res.status(201).json(artPiece);
  } catch (error) {
    console.error("Create Art Error:", error);
    // If S3 upload succeeded but DB failed, you might want to delete the S3 object
    // For simplicity, we're not handling that rollback here
    res.status(500).json({ message: error.message || 'Server Error creating art piece' });
  }
};

// Get all art pieces (publicly accessible)
exports.getAllArtPieces = async (req, res) => {
  try {
    const artPieces = await ArtPiece.findAll({
      include: [{ model: User, as: 'artist', attributes: ['id', 'username'] }],
      order: [['createdAt', 'DESC']],
    });
    res.json(artPieces);
  } catch (error) {
    res.status(500).json({ message: error.message || 'Server Error' });
  }
};

// Get a single art piece by ID (publicly accessible)
exports.getArtPieceById = async (req, res) => {
  try {
    const artPiece = await ArtPiece.findByPk(req.params.id, {
      include: [{ model: User, as: 'artist', attributes: ['id', 'username'] }],
    });
    if (artPiece) {
      res.json(artPiece);
    } else {
      res.status(404).json({ message: 'Art piece not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message || 'Server Error' });
  }
};

// Get art pieces by current user
exports.getMyArtPieces = async (req, res) => {
    try {
        const artPieces = await ArtPiece.findAll({
            where: { artistId: req.user.id },
            include: [{ model: User, as: 'artist', attributes: ['id', 'username'] }],
            order: [['createdAt', 'DESC']],
        });
        res.json(artPieces);
    } catch (error) {
        res.status(500).json({ message: error.message || 'Server Error' });
    }
};


// Update an art piece (only by owner)
exports.updateArtPiece = async (req, res) => {
  const { title, description } = req.body;
  try {
    const artPiece = await ArtPiece.findByPk(req.params.id);
    if (!artPiece) {
      return res.status(404).json({ message: 'Art piece not found' });
    }
    if (artPiece.artistId.toString() !== req.user.id.toString()) {
      return res.status(401).json({ message: 'User not authorized' });
    }

    artPiece.title = title || artPiece.title;
    artPiece.description = description || artPiece.description;
    // Image update would require new S3 upload and deleting old one - more complex for MVP
    // Re-generating verification hash if critical data changes
    const dataToHash = `${artPiece.title}-${artPiece.description}-${artPiece.artistId}-${Date.now()}`;
    artPiece.verificationHash = require('crypto').createHash('sha256').update(dataToHash).digest('hex');

    await artPiece.save();
    res.json(artPiece);
  } catch (error) {
    res.status(500).json({ message: error.message || 'Server Error' });
  }
};

// Delete an art piece (only by owner)
exports.deleteArtPiece = async (req, res) => {
  try {
    const artPiece = await ArtPiece.findByPk(req.params.id);
    if (!artPiece) {
      return res.status(404).json({ message: 'Art piece not found' });
    }
    if (artPiece.artistId.toString() !== req.user.id.toString()) {
      return res.status(401).json({ message: 'User not authorized' });
    }

    // TODO: Delete image from S3 bucket as well
    // const s3 = new AWS.S3();
    // const key = artPiece.imageUrl.substring(artPiece.imageUrl.lastIndexOf('/') + 1); // simplistic key extraction
    // await s3.deleteObject({ Bucket: process.env.S3_BUCKET_NAME, Key: key }).promise();

    await artPiece.destroy();
    res.json({ message: 'Art piece removed' });
  } catch (error) {
    res.status(500).json({ message: error.message || 'Server Error' });
  }
};